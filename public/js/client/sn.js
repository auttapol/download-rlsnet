// Generated by CoffeeScript 1.5.0

$(function() {
  var methods;
  methods = {
    init: function(options) {},
    sendRequest: function(options) {
      var def, sn;
      if (!options) {
        options = {};
      }
      def = {
        type: 'json',
        debug: false,
        action: 'submit',
        first: $('#page-first').val(),
        last: $('#page-last').val()
      };
      $.extend(true, def, options);
      if (def.debug) {
        def.type = 'text';
      }
      sn = $(this).data('sn');
      return $.ajax({
        url: 'index.php',
        type: 'POST',
        data: {
          action: def.action,
          first: def.first,
          last: def.last
        },
        dataType: def.type,
        timeout: 10000,
        beforeSend: function() {
          return $("#loading").show();
        },
        success: function(s) {
          if (typeof s === 'object') {
            $.extend(true, sn.result, s);
          } else {
            if (def.debug) {
              alert(s);
            }
            sn.result = s;
          }
          $(this).data('sn', sn);
          if (typeof sn.result === 'object') {
            if (sn.result.alert) {
              alert(sn.result.alert);
            }
            if (sn.result.callback) {
              $(this).snEvents({
                href: '#' + sn.result.callback
              });
            }
          }
          return $("#loading").hide();
        },
        error: function(XMLHttpRequest, textStatus, error) {}
      });
    }
  };
  return $.fn.snAjax = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;
  methods = {
    init: function(options) {
      var def;
      if (!options) {
        options = {};
      }
      def = {
        content: {},
        result: {
          key: ''
        }
      };
      $.extend(true, def, options);
      $(this).data('sn', def);
      $(this).snTriggers();
      return $(this).snEvents({
        'href': '#autoload'
      });
    }
  };
  return $.fn.sn = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;
  methods = {
    init: function(options) {
      return $(this).snConf(main);
    },
    main: function(options) {
      var sn;
      sn = $(this).data(sn);
      return $.ajax({
        url: 'sn-project/settings/main.json',
        async: false,
        dataType: 'json',
        success: function(s) {
          $.extend(true, sn, s);
          return $(this).data('sn', sn);
        }
      });
    }
  };
  return $.fn.snConf = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;
  methods = {
    init: function(options) {
      var def, href, sn;
      def = {
        href: 'none'
      };
      $.extend(true, def, options);
      sn = $(this).data('sn');
      href = def.href;
      switch (href.replace(/(.*)#(.*)/, '$2')) {
        case "autoload":
          break;
        case "get":
          return $(this).snAjax('sendRequest', {
            action: 'get',
            debug: false
          });
        case "afterGet":
          if (sn.result) {
            if (sn.result.response) {
              $("#response").html(sn.result.text);
            }
          }
          $('#page-first').val(parseInt($('#page-first').val()) + 1);
          if (parseInt($('#page-first').val()) <= parseInt($('#page-last').val())) {
            if ($('#status').val() === 'start') {
              return $(this).snEvents({
                href: '#get'
              });
            }
          }
          break;
        case "start":
          if ($('#status').val() === 'stop') {
            $('#btn-start').hide();
            $('#btn-stop').show();
            $('#status').val('start');
            return $(this).snEvents({
              href: '#get'
            });
          }
          break;
        case "stop":
          if ($('#status').val() === 'start') {
            $('#btn-start').show();
            $('#btn-stop').hide();
            return $('#status').val('stop');
          }
          break;
        case "close":
          return $(this).hide();
      }
    }
  };
  return $.fn.snEvents = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;
  methods = {
    init: function() {
      $(this).snTriggers('start');
      return $(this).snTriggers('stop');
    },
    start: function() {
      var th;
      th = $(this);
      return $("#btn-start").on("click", function(e) {
        e.preventDefault();
        if (parseInt($('#page-first').val()) <= parseInt($('#page-last').val())) {
          return th.snEvents({
            href: '#start'
          });
        }
      });
    },
    stop: function() {
      var th;
      th = $(this);
      return $("#btn-stop").on("click", function(e) {
        e.preventDefault();
        return th.snEvents({
          href: '#stop'
        });
      });
    }
  };
  return $.fn.snTriggers = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});
