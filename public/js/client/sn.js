// Generated by CoffeeScript 1.6.2
$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    get: function(options) {
      var def, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      def = {
        url: '//api-dev.oz.st-n.ru',
        type: 'jsonp',
        action: 'get',
        href: ''
      };
      $.extend(true, def, options);
      console.log('request', def);
      return $.ajax({
        url: def.url,
        async: true,
        type: 'GET',
        data: def,
        dataType: def.type,
        timeout: 1000000,
        success: function(s) {
          console.log('response', s);
          if (s.fn != null) {
            return $(_this).snClient(s.fn, s);
          }
        }
      });
    },
    put: function(options) {
      var def, _this;

      if (options == null) {
        options = {};
      }
      _this = this;
      def = {
        url: '//api-dev.oz.st-n.ru',
        type: 'jsonp',
        action: 'put'
      };
      $.extend(true, def, options);
      if (def.debug) {
        def.type = 'text';
      }
      return $.ajax({
        url: def.url,
        type: 'GET',
        data: def,
        dataType: def.type,
        timeout: 10000,
        success: function(s) {
          return console.log('response', s);
        }
      });
    }
  };
  return $.fn.snAjax = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      return methods.init.apply(this, arguments);
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(s) {
      if (s == null) {
        s = {};
      }
    },
    getList: function(s) {
      var i;

      if (s == null) {
        s = {};
      }
      console.log('getList');
      i = parseInt($('#page-first').val());
      return $(this).snAjax('get', {
        href: $(this).snConf('url', i),
        fn: 'parseList-dev'
      });
    },
    parseList: function(s) {
      if (s == null) {
        s = {};
      }
      console.log('parseList');
      if (s.html != null) {
        return $('.tn_alf_list', s.html).find('a').each(function(i) {
          var url;

          url = $(this).attr('href');
          console.log(i, url);
          if (url != null) {
            return $(this).snAjax('get', {
              href: url,
              fn: 'parsePage'
            });
          }
        });
      }
    },
    parsePage: function(s) {
      if (s == null) {
        s = {};
      }
      return console.log('parsePage');
    }
  };
  return $.fn.snClient = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      return methods.init.apply(this, arguments);
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var def;

      if (!options) {
        options = {};
      }
      def = {
        content: {},
        result: {
          key: ''
        }
      };
      $.extend(true, def, options);
      $(this).data('sn', def);
      return $(this).snTriggers();
    }
  };
  return $.fn.sn = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      if (options == null) {
        options = {};
      }
    },
    url: function(i) {
      var def;

      if (i == null) {
        i = 'A';
      }
      def = ['http://www.rlsnet.ru/mnn_alf_letter_2.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C0.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C2.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C3.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C4.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C6.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C7.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C8.htm', 'http://www.rlsnet.ru/mnn_alf_letter_C9.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CA.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CB.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CC.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CD.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CE.htm', 'http://www.rlsnet.ru/mnn_alf_letter_CF.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D0.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D1.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D2.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D3.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D4.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D5.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D6.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D7.htm', 'http://www.rlsnet.ru/mnn_alf_letter_D8.htm', 'http://www.rlsnet.ru/mnn_alf_letter_DD.htm', 'http://www.rlsnet.ru/mnn_alf_letter_DF.htm'];
      return def[i];
    }
  };
  return $.fn.snConf = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      return methods.init.apply(this, arguments);
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function(options) {
      var def, href, sn;

      if (options == null) {
        options = {};
      }
      def = {
        href: 'none'
      };
      $.extend(true, def, options);
      sn = $(this).data('sn');
      href = def.href;
      switch (href.replace(/(.*)#(.*)/, '$2')) {
        case "autoload":
          break;
        case "content":
          console.log('content');
          return $(this).snAjax('getContentFromSite');
        case "afterGet":
          if (sn.result) {
            if (sn.result.response) {
              $("#response").html(sn.result.text);
            }
          }
          return $('#page-first').val(parseInt($('#page-first').val()) + 1);
        case "start":
          console.log('start');
          return $(this).snClient('getList');
        case "stop":
          break;
        case "close":
          return $(this).hide();
      }
    }
  };
  return $.fn.snEvents = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      if (typeof sn === 'object' || !sn) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Метод ' + sn + ' не существует');
      }
    }
  };
});

$(function() {
  var methods;

  methods = {
    init: function() {
      $(this).snTriggers('start');
      return $(this).snTriggers('stop');
    },
    start: function() {
      var _this;

      _this = this;
      return $("#btn-start").on("click", function(e) {
        e.preventDefault();
        if (parseInt($('#page-first').val()) <= parseInt($('#page-last').val())) {
          return $(_this).snEvents({
            href: '#start'
          });
        }
      });
    },
    stop: function() {
      var _this;

      _this = this;
      return $("#btn-stop").on("click", function(e) {
        e.preventDefault();
        return $(_this).snEvents({
          href: '#stop'
        });
      });
    }
  };
  return $.fn.snTriggers = function(sn) {
    if (!sn) {
      sn = {};
    }
    if (methods[sn]) {
      return methods[sn].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
      return methods.init.apply(this, arguments);
    }
  };
});
